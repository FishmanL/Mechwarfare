#define MAESTRO_RX 8
#define MAESTRO_TX 9

#define XBEE_RX 10
#define XBEE_TX 9 // should this be changed not to conflict?

#define INPUT_SIZE 7

#define BAUD_RATE 38400

#define SETUP_DELAY_TIME 10000
#define EVENT_DELAY_TIME 100

#define MOVEMENT_THRESHOLD 3

#define FRONT_LEFT_HIP_HOME_POS    6204
#define FRONT_LEFT_KNEE_HOME_POS   4826
#define FRONT_LEFT_ANKLE_HOME_POS  8096
#define FRONT_RIGHT_HIP_HOME_POS   5494
#define FRONT_RIGHT_KNEE_HOME_POS  3392
#define FRONT_RIGHT_ANKLE_HOME_POS 7720
#define BACK_RIGHT_HIP_HOME_POS    7372
#define BACK_RIGHT_KNEE_HOME_POS   4024
#define BACK_RIGHT_ANKLE_HOME_POS  7630
#define BACK_LEFT_HIP_HOME_POS     4588
#define BACK_LEFT_KNEE_HOME_POS    3934
#define BACK_LEFT_ANKLE_HOME_POS   8722
#define TURRET_PAN_HOME_POS        6000
#define TURRET_TILT_HOME_POS       5850

#define CREEP_ROTATE_ANGLE       2000
#define CREEP_RAISE_KNEE_ANGLE   2000
#define CREEP_RAISE_ANKLE_ANGLE  1200
#define CREEP_PUSH_ANKLE_ANGLE   900
#define CREEP_PUSH_KNEE_ANGLE   -200
#define TURNING_V_ANGLE 800
#define TURNING_H_ANGLE 2000
#define TURRET_V_ANGLE 700
#define TURRET_H_ANGLE 1000
#define ZERO_ANGLE 0

#define STAND_LEN         15
#define TURN_LEN          22
#define TO_CREEP_LEN      16
#define CREEP_LEN         45
#define CREEP_STAND_LEN   13
#define CREEP_FORWARD_LEN 24

#define TURRET_UP_DOWN_LEN 6
#define TURRET_SIDE_LEN    8

#define CREEP_FWRD_FROM_R_LEN
#define CREEP_FWRD_FROM_L_LEN
#define CREEP_BKWRD_FROM_R_LEN
#define CREEP_BKWRD_FROM_L_LEN
#define CREEP_LEFT_FROM_R_LEN
#define CREEP_LEFT_FROM_L_LEN
#define CREEP_RIGHT_FROM_R_LEN
#define CREEP_RIGHT_FROM_L_LEN
#define CREEP_R_TO_HOME_LEN
#define HOME_TO_CREEP_R_LEN
#define CREEP_L_TO_HOME_LEN
#define HOME_TO_CREEP_L_LEN
#define SHUFFLE_FWRD_LEN
#define SHUFFLE_BKWRD_LEN
#define SHUFFLE_LEFT_LEN
#define SHUFFLE_RIGHT_LEN
#define TURRET_UP_LEN
#define TURRET_V_RESET_LEN
#define TURRET_DWN_LEN
#define TURRET_L_LEN
#define TURRET_H_RESET_LEN
#define TURRET_R_LEN
#define TURN_R_LEN
#define TURN_L_LEN

enum pservo_t {
    DELAY             = -1,
    FRONT_LEFT_HIP    =  0,
    FRONT_LEFT_KNEE   =  1,
    FRONT_LEFT_ANKLE  =  2,
    FRONT_RIGHT_HIP   =  3,
    FRONT_RIGHT_KNEE  =  4,
    FRONT_RIGHT_ANKLE =  5,
    BACK_RIGHT_HIP    =  6,
    BACK_RIGHT_KNEE   =  7,
    BACK_RIGHT_ANKLE  =  8,
    BACK_LEFT_HIP     =  9,
    BACK_LEFT_KNEE    =  10,
    BACK_LEFT_ANKLE   =  11,
    TURRET_H          =  12,
    TURRET_V          =  13,
    NUM_SERVOS        =  14
};

struct event_t {
    pservo_t servo;
    int value;
};

int HOME_POS[] = {
    [FRONT_LEFT_HIP]    = FRONT_LEFT_HIP_HOME_POS,
    [FRONT_LEFT_KNEE]   = FRONT_LEFT_KNEE_HOME_POS,
    [FRONT_LEFT_ANKLE]  = FRONT_LEFT_ANKLE_HOME_POS,
    [FRONT_RIGHT_HIP]   = FRONT_RIGHT_HIP_HOME_POS,
    [FRONT_RIGHT_KNEE]  = FRONT_RIGHT_KNEE_HOME_POS,
    [FRONT_RIGHT_ANKLE] = FRONT_RIGHT_ANKLE_HOME_POS,
    [BACK_RIGHT_HIP]    = BACK_RIGHT_HIP_HOME_POS,
    [BACK_RIGHT_KNEE]   = BACK_RIGHT_KNEE_HOME_POS,
    [BACK_RIGHT_ANKLE]  = BACK_RIGHT_ANKLE_HOME_POS,
    [BACK_LEFT_HIP]     = BACK_LEFT_HIP_HOME_POS,
    [BACK_LEFT_KNEE]    = BACK_LEFT_KNEE_HOME_POS,
    [BACK_LEFT_ANKLE]   = BACK_LEFT_ANKLE_HOME_POS,
    [TURRET_H]          = TURRET_PAN_HOME_POS,
    [TURRET_V]          = TURRET_TILT_HOME_POS
};

event_t TO_HOME[] = {
    {FRONT_RIGHT_HIP,   ZERO_ANGLE},
    {FRONT_RIGHT_KNEE,  ZERO_ANGLE},
    {FRONT_RIGHT_ANKLE, ZERO_ANGLE},
    {FRONT_LEFT_HIP,    ZERO_ANGLE},
    {FRONT_LEFT_KNEE,   ZERO_ANGLE},
    {FRONT_LEFT_ANKLE,  ZERO_ANGLE},
    {BACK_RIGHT_HIP,    ZERO_ANGLE},
    {BACK_RIGHT_KNEE,   ZERO_ANGLE},
    {BACK_RIGHT_ANKLE,  ZERO_ANGLE},
    {BACK_LEFT_HIP,     ZERO_ANGLE},
    {BACK_LEFT_KNEE,    ZERO_ANGLE},
    {BACK_LEFT_ANKLE,   ZERO_ANGLE},
    {TURRET_H,          ZERO_ANGLE},
    {TURRET_V,          ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME}
};

event_t CREEP_FWRD_FROM_R[] = {
    {TURRET_H,           ZERO_ANGLE},
    {TURRET_V,           ZERO_ANGLE},
    {FRONT_RIGHT_KNEE,   CREEP_RAISE_KNEE_ANGLE},
    {FRONT_RIGHT_ANKLE, -CREEP_PUSH_ANKLE_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {FRONT_RIGHT_HIP,    ZERO_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {FRONT_RIGHT_KNEE,   CREEP_PUSH_KNEE_ANGLE},
    {FRONT_RIGHT_ANKLE, -CREEP_PUSH_ANKLE_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {BACK_RIGHT_HIP,     ZERO_ANGLE},
    {FRONT_LEFT_HIP,    -CREEP_ROTATE_ANGLE},
    {BACK_LEFT_ANKLE,   -CREEP_PUSH_ANKLE_ANGLE},
    {FRONT_RIGHT_KNEE,   ZERO_ANGLE},
    {FRONT_RIGHT_ANKLE,  ZERO_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {BACK_LEFT_KNEE,     CREEP_RAISE_KNEE_ANGLE},
    {BACK_LEFT_ANKLE,    CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {BACK_LEFT_HIP,      CREEP_ROTATE_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {BACK_LEFT_KNEE,     ZERO_ANGLE},
    {BACK_LEFT_ANKLE,    ZERO_ANGLE},
    {DELAY,              EVENT_DELAY_TIME}
};

event_t CREEP_FWRD_FROM_L[] = {
    {TURRET_H,          ZERO_ANGLE},
    {TURRET_V,          ZERO_ANGLE},
    {FRONT_LEFT_KNEE,   CREEP_RAISE_KNEE_ANGLE},
    {FRONT_LEFT_ANKLE, -CREEP_PUSH_ANKLE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_LEFT_HIP,    ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_LEFT_KNEE,   CREEP_PUSH_KNEE_ANGLE},
    {FRONT_LEFT_ANKLE, -CREEP_PUSH_ANKLE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_LEFT_HIP,     ZERO_ANGLE},
    {FRONT_RIGHT_HIP,   CREEP_ROTATE_ANGLE},
    {BACK_RIGHT_ANKLE, -CREEP_PUSH_ANKLE_ANGLE},
    {FRONT_LEFT_KNEE,   ZERO_ANGLE},
    {FRONT_LEFT_ANKLE,  ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_RIGHT_KNEE,   CREEP_RAISE_KNEE_ANGLE},
    {BACK_RIGHT_ANKLE,  CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_RIGHT_HIP,   -CREEP_ROTATE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_RIGHT_KNEE,   ZERO_ANGLE},
    {BACK_RIGHT_ANKLE,  ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME}
};

event_t CREEP_BKWRD_FROM_R[] = {
    // todo
};

event_t CREEP_BKWRD_FROM_L[] = {
    // todo
};

event_t CREEP_LEFT_FROM_R[] = {
    // todo
};

event_t CREEP_LEFT_FROM_L[] = {
    // todo
};

event_t CREEP_RIGHT_FROM_R[] = {
    // todo
};

event_t CREEP_RIGHT_FROM_L[] = {
    // todo
};

event_t HOME_TO_CREEP_R[] = {
    {FRONT_RIGHT_KNEE,   CREEP_RAISE_KNEE_ANGLE},
    {FRONT_RIGHT_ANKLE,  CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {FRONT_RIGHT_HIP,    CREEP_ROTATE_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {FRONT_RIGHT_KNEE,   ZERO_ANGLE},
    {FRONT_RIGHT_ANKLE,  ZERO_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {BACK_RIGHT_KNEE,    CREEP_RAISE_KNEE_ANGLE},
    {BACK_RIGHT_ANKLE,   CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {BACK_RIGHT_HIP,    -CREEP_ROTATE_ANGLE},
    {DELAY,              EVENT_DELAY_TIME},
    {BACK_RIGHT_KNEE,    ZERO_ANGLE},
    {BACK_RIGHT_ANKLE,   ZERO_ANGLE},
    {DELAY,              EVENT_DELAY_TIME}
};

event_t CREEP_R_TO_HOME[] = {
    {FRONT_RIGHT_KNEE,  CREEP_RAISE_KNEE_ANGLE},
    {FRONT_RIGHT_ANKLE, CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_RIGHT_HIP,   ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_RIGHT_KNEE,  ZERO_ANGLE},
    {FRONT_RIGHT_ANKLE, ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_RIGHT_KNEE,   CREEP_RAISE_KNEE_ANGLE},
    {BACK_RIGHT_ANKLE,  CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_RIGHT_HIP,    ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_RIGHT_KNEE,   ZERO_ANGLE},
    {BACK_RIGHT_ANKLE,  ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME}
};

event_t HOME_TO_CREEP_L[] = {
    {FRONT_LEFT_KNEE,   CREEP_RAISE_KNEE_ANGLE},
    {FRONT_LEFT_ANKLE,  CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_LEFT_HIP,   -CREEP_ROTATE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_LEFT_KNEE,   ZERO_ANGLE},
    {FRONT_LEFT_ANKLE,  ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_LEFT_KNEE,    CREEP_RAISE_KNEE_ANGLE},
    {BACK_LEFT_ANKLE,   CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_LEFT_HIP,     CREEP_ROTATE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {BACK_LEFT_KNEE,    ZERO_ANGLE},
    {BACK_LEFT_ANKLE,   ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME}
};

event_t CREEP_L_TO_HOME[] = {
    {FRONT_LEFT_KNEE,  CREEP_RAISE_KNEE_ANGLE},
    {FRONT_LEFT_ANKLE, CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {FRONT_LEFT_HIP,   ZERO_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {FRONT_LEFT_KNEE,  ZERO_ANGLE},
    {FRONT_LEFT_ANKLE, ZERO_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {BACK_LEFT_KNEE,   CREEP_RAISE_KNEE_ANGLE},
    {BACK_LEFT_ANKLE,  CREEP_RAISE_ANKLE_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {BACK_LEFT_HIP,    ZERO_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {BACK_LEFT_KNEE,   ZERO_ANGLE},
    {BACK_LEFT_ANKLE,  ZERO_ANGLE},
    {DELAY,            EVENT_DELAY_TIME}
};

event_t SHUFFLE_FWRD[] = {
    // todo
};

event_t SHUFFLE_BKWRD[] = {
    // todo
};

event_t SHUFFLE_LEFT[] = {
    // todo
};

event_t SHUFFLE_RIGHT[] = {
    // todo
};

event_t TURRET_UP[] = {
    {TURRET_V, TURRET_V_ANGLE}
};

event_t TURRET_V_RESET[] = {
    {TURRET_V, ZERO_ANGLE}
};

event_t TURRET_DWN[] = {
    {TURRET_V, -TURRET_V_ANGLE}
};

event_t TURRET_L[] = {
    {TURRET_H, TURRET_H_ANGLE}
};

event_t TURRET_H_RESET[] = {
    {TURRET_H, ZERO_ANGLE}
};

event_t TURRET_R[] = {
    {TURRET_H, -TURRET_H_ANGLE}
};

event_t TURN_R[] = {
    {FRONT_LEFT_KNEE,  TURNING_RAISE_ANGLE},
    {BACK_RIGHT_KNEE,  TURNING_RAISE_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {FRONT_LEFT_HIP,  -TURNING_ROTATE_ANGLE},
    {BACK_RIGHT_HIP,  -TURNING_ROTATE_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {FRONT_LEFT_KNEE,  ZERO_ANGLE},
    {BACK_RIGHT_KNEE,  ZERO_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {FRONT_LEFT_HIP,   ZERO_ANGLE},
    {BACK_RIGHT_HIP,   ZERO_ANGLE},

    {FRONT_RIGHT_KNEE,  TURNING_RAISE_ANGLE},
    {BACK_LEFT_KNEE,    TURNING_RAISE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_RIGHT_HIP,  -TURNING_ROTATE_ANGLE},
    {BACK_LEFT_HIP,    -TURNING_ROTATE_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_RIGHT_KNEE,  ZERO_ANGLE},
    {BACK_LEFT_KNEE,    ZERO_ANGLE},
    {DELAY,             EVENT_DELAY_TIME},
    {FRONT_RIGHT_HIP,   ZERO_ANGLE},
    {BACK_LEFT_HIP,     ZERO_ANGLE}
};

event_t TURN_L[] = {
    {FRONT_LEFT_KNEE, TURNING_RAISE_ANGLE},
    {BACK_RIGHT_KNEE, TURNING_RAISE_ANGLE},
    {DELAY,           EVENT_DELAY_TIME},
    {FRONT_LEFT_HIP,  TURNING_ROTATE_ANGLE},
    {BACK_RIGHT_HIP,  TURNING_ROTATE_ANGLE},
    {DELAY,           EVENT_DELAY_TIME},
    {FRONT_LEFT_KNEE, ZERO_ANGLE},
    {BACK_RIGHT_KNEE, ZERO_ANGLE},
    {DELAY,           EVENT_DELAY_TIME},
    {FRONT_LEFT_HIP,  ZERO_ANGLE},
    {BACK_RIGHT_HIP,  ZERO_ANGLE},

    {FRONT_RIGHT_KNEE, TURNING_RAISE_ANGLE},
    {BACK_LEFT_KNEE,   TURNING_RAISE_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {FRONT_RIGHT_HIP,  TURNING_ROTATE_ANGLE},
    {BACK_LEFT_HIP,    TURNING_ROTATE_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {FRONT_RIGHT_KNEE, ZERO_ANGLE},
    {BACK_LEFT_KNEE,   ZERO_ANGLE},
    {DELAY,            EVENT_DELAY_TIME},
    {FRONT_RIGHT_HIP,  ZERO_ANGLE},
    {BACK_LEFT_HIP,    ZERO_ANGLE}
};
